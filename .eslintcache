[{"/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/index.js":"1","/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/reportWebVitals.js":"2","/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/App.js":"3","/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/components/SignUp.js":"4","/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/components/EditPlant.js":"5","/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/components/StyledComponents.js":"6","/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/components/CreatePlantForm.js":"7","/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/components/LoginForm.js":"8","/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/validation/CreatePlantFormSchema.js":"9","/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/validation/LoginFormSchema.js":"10"},{"size":500,"mtime":1609794473852,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1609794473852,"results":"13","hashOfConfig":"12"},{"size":854,"mtime":1609799429617,"results":"14","hashOfConfig":"12"},{"size":2589,"mtime":1609953344830,"results":"15","hashOfConfig":"12"},{"size":2013,"mtime":1609950933782,"results":"16","hashOfConfig":"12"},{"size":2508,"mtime":1609795809490,"results":"17","hashOfConfig":"12"},{"size":2962,"mtime":1609799429618,"results":"18","hashOfConfig":"12"},{"size":2308,"mtime":1609799429619,"results":"19","hashOfConfig":"12"},{"size":328,"mtime":1609799429620,"results":"20","hashOfConfig":"12"},{"size":214,"mtime":1609799429621,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"ox9xak",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/index.js",[],["47","48"],"/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/reportWebVitals.js",[],"/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/App.js",[],"/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/components/SignUp.js",["49","50","51"],"import React from \"react\";\nimport { withFormik, Field } from \"formik\";\nimport * as yup from \"yup\";\nimport axios from \"axios\";\nimport styled from \"styled-components\";\n\n//Import From\nimport { \n  Input,\n  Heading,\n  FormDiv,\n  Button,\n  Label,\n  Error\n} from './StyledComponents'\n\n\nconst SignUp = props => {\n  const { errors, touched, values } = props;\n  return (\n    <>\n      <FormDiv>\n      <Heading>Let's get Savvy</Heading>\n        <Label>User Name</Label>\n        <Input type=\"text\" name=\"username\"/>\n        {touched.username && errors.username && (\n          <Error>{errors.username}</Error>\n        )}\n        <Label>Phone Number</Label>\n        <Input type=\"text\" name=\"phonenumber\"/>\n        {touched.phonenumber && errors.phonenumber && (\n          <Error>{errors.phonenumber}</Error>\n        )}\n        <Label>Password</Label>\n        <Input type=\"password\" name=\"password\"/>\n        {touched.password && errors.password && (\n          <Error>{errors.password}</Error>\n        )}\n        <Label>Confirm Password</Label>\n        <Input type=\"password\" name=\"password2\"/>\n        {touched.password2 && errors.password2 && (\n          <Error>{errors.password2.slice(49, 69)}</Error>\n        )}\n        <Button type=\"submit\">Sign Up</Button>\n      </FormDiv>\n    </>\n  );\n};\n\nexport default withFormik({\n  mapPropsToValues: values => {\n    return {\n      username: values.username || \"\",\n      password: values.password || \"\",\n      password2: values.password2 || \"\",\n      phonenumber: values.phonenumber || \"\",\n    };\n  },\n  validationSchema: yup.object().shape({\n    username: yup\n      .string()\n      .min(5, \"your username must have at least 5 characters\")\n      .required(),\n    password: yup\n      .string()\n      .min(8, \"password must be at least 8 characters\")\n      .required(\"enter and confirm password\"),\n    password2: yup\n      .string()\n      .oneOf([yup.ref(\"password\"), null, \"passwords must match\"])\n      .required(\"passwords must match\"),\n    phonenumber: yup\n      .number()\n      .positive()\n      .required(\"phone number required\"),\n  }),\n  validateOnChange: false,\n  validateOnBlur: false,\n  handleSubmit: (values, { props, resetForm }) => {\n    let userObj = {\n      username: values.username,\n      password: values.password,\n      phonenumber: values.phonenumber\n    };\n    axios\n      .post(\n        \"\",\n        userObj\n      )\n      .then(res => {\n        localStorage.setItem(\"token\", res.data.token);\n        resetForm();\n        return props.history.push(\"/home\");\n      })\n      .catch(err => {\n        return err.response;\n      });\n  }\n})(SignUp);","/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/components/EditPlant.js",["52","53","54"],"import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport axios from 'axios';\nimport { withFormik, Form, Field } from 'formik';\nimport * as yup from 'yup';\n\n//Styles Import//\nimport { \n    Body,\n    PlantForm,\n    FieldInput,\n    Button,\n  } from './StyledComponents'\n\nconst EditPlant = ({ errors, touched, status }) => {\n  const [newPlant, addNewPlant] = useState([]);\n\n  useEffect(() => {\n    if (status) {\n      addNewPlant([...newPlant, status]);\n    }\n  }, [newPlant, status]);\n\n  return (\n    <Body>\n      <PlantForm>\n        <h1>Edit Plant</h1>\n        {touched.number && errors.number && (\n            <p className=\"error\">{errors.number}</p>\n        )}\n        <FieldInput type=\"number\" name=\"number\" placeholder=\"Amount\" />\n        {touched.plant && errors.plant && (\n          <p className=\"error\">{errors.plant}</p>\n        )}\n        <FieldInput type=\"text\" name=\"plant\" placeholder=\"Nick Name\" />\n\n        {touched.species && errors.species && (\n          <p className=\"error\">{errors.species}</p>\n        )}\n        <FieldInput type=\"text\" name=\"species\" placeholder=\"Species\" />\n\n        {touched.water && errors.water && (\n          <p className=\"error\">{errors.water}</p>\n        )}\n        <FieldInput type=\"text\" name=\"water\" placeholder=\"Water Intake\" />\n\n        <Button type=\"submit\">Submit!</Button>\n      </PlantForm>\n    </Body>\n  );\n};\n\nexport default withFormik({\n  mapPropsToValues: values => {\n    return {\n      number: values.number || '',\n      plant: values.plant || '',\n      species: values.species || '',\n      water: values.water || ''\n    };\n  },\n  validationSchema: yup.object().shape({\n    number: yup.number(),\n    plant: yup.string(),\n    species: yup.string(),\n    water: yup.string()\n  }),\n  handleSubmit: (values, { setStatus }) => {\n    axios\n      .put('', values)\n      .then(response => {\n        setStatus(response.data);\n      })\n      .catch(error => {\n        console.log('Error:', error);\n      });\n  }\n})(EditPlant);","/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/components/StyledComponents.js",[],"/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/components/CreatePlantForm.js",["55"],"import React, { useState } from 'react';\nimport * as yup from 'yup';\nimport createPlantSchema from '../validation/CreatePlantFormSchema';\n\n// Create Plant Form Empty Objects\nconst blankCreatePlantForm = {\n    nickname: '',\n    species: '',\n    waterfrequency: '',\n}\n  \nconst initialCreatePlantErrors = {\n    nickname: '',\n    species: '',\n    waterfrequency: '',\n}\n\nfunction CreatePlantForm(props) {\n\n    // Create Plant Form UseState and event handlers\n\n  const [createPlantFormValues, setCreatePlantFormValues] = useState(blankCreatePlantForm);\n  const [newPlant, setNewPlant] = useState([]);\n  const [createPlantErrors, setCreatePlantErrors] = useState(initialCreatePlantErrors);\n\n    \n    const changeCreatePlantValues = (event) => {\n        const {name, value} = event.target;\n        updateCreatePlantForm(name, value);\n    };\n\n    const uponSubmitCreatePlant = (event) => {\n        event.preventDefault();\n        submitCreatePlantForm();\n    }\n\n    const updateCreatePlantForm = (name, value) => {\n\n        yup.reach(createPlantSchema, name)\n         .validate(value)\n         .then(() => {\n           setCreatePlantErrors({...createPlantErrors, [name]: '',})\n           setCreatePlantFormValues({...createPlantFormValues, [name]: value,});\n         })\n         .catch((error) => {\n           setCreatePlantErrors({...createPlantErrors, [name]: error.errors[0],})\n         })\n    };\n    \n    const submitCreatePlantForm = () => {\n        const createPlantInfo = {\n          nickname: createPlantFormValues.nickname,\n          species: createPlantFormValues.species,\n          waterfrequency: createPlantFormValues.waterfrequency,\n        }\n    \n        setNewPlant(createPlantInfo);\n        setCreatePlantFormValues(blankCreatePlantForm);\n    };\n\n    return (\n        <div>\n            <form onSubmit = {uponSubmitCreatePlant} >\n                <label> Nickname\n                    <input name = 'nickname' \n                     type = 'text' \n                     value = {createPlantFormValues.nickname} \n                     onChange = {changeCreatePlantValues} />\n                </label>\n\n                <label> Species\n                    <input name = 'species' \n                     type = 'text' \n                     value = {createPlantFormValues.species} \n                     onChange = {changeCreatePlantValues} />\n                </label>\n\n                <label> Water Frequency\n                    <input name = 'waterfrequency' \n                     type = 'text' \n                     value = {createPlantFormValues.waterfrequency} \n                     onChange = {changeCreatePlantValues} />\n                </label>\n                <button>Submit</button>\n            </form>\n\n            <div>\n                <p>{createPlantErrors.nickname}</p>\n                <p>{createPlantErrors.species}</p>\n                <p>{createPlantErrors.waterfrequency}</p>\n            </div>\n        </div>\n    )\n};\n\nexport default CreatePlantForm;","/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/components/LoginForm.js",["56"],"import React, { useState } from 'react';\nimport * as yup from 'yup';\nimport loginSchema from '../validation/LoginFormSchema';\n\n// Login Form Initial Objects\nconst blankLoginForm = {\n    username: '',\n    password: '',\n}\n\nconst initialLoginErrors = {\n    name: '',\n    password: '',\n}\n\nfunction LoginForm(props) {\n\n  // Login Form Use States and event handlers\n  const [loginFormValues, setLoginFormValues] = useState(blankLoginForm);\n  const [user, setUser] = useState([]);\n  const [loginErrors, setLoginErrors] = useState(initialLoginErrors);\n\n\n    \n    const changeLoginValues = (event) => {\n        const {name, value} = event.target;\n        updateLoginForm(name, value);\n    };\n\n    const uponSubmitLogin = (event) => {\n        event.preventDefault();\n        submitLoginForm();\n    };\n\n    const updateLoginForm = (name, value) => {\n\n        yup.reach(loginSchema, name)\n         .validate(value)\n         .then(() => {\n           setLoginErrors({...loginErrors, [name]: '',})\n           setLoginFormValues({...loginFormValues, [name]: value});\n         })\n         .catch((error) => {\n           setLoginErrors({...loginErrors, [name]: error.errors[0],})\n         })\n    }\n    \n    const submitLoginForm = () => {\n        const userLoginInfo = {\n          username: loginFormValues.username,\n          password: loginFormValues.password,\n        }\n    \n        setUser(userLoginInfo);\n        setLoginFormValues(blankLoginForm);\n    }\n\n\n    return (\n        <div>\n            <form onSubmit = {uponSubmitLogin}>\n                <label> Username\n                    <input name = 'username'\n                     type = 'text' \n                     value = {loginFormValues.username}\n                     onChange = {changeLoginValues} />\n                </label>\n\n                <label> Password\n                    <input name = 'password'\n                     type = 'password' \n                     value = {loginFormValues.password} \n                     onChange = {changeLoginValues} />\n                </label>\n                <button>Submit</button>\n            </form>\n            \n            <div className = 'errors-container'>\n                <p>{loginErrors.username}</p>\n                <p>{loginErrors.password}</p>\n            </div>\n        </div>\n    )\n};\n\nexport default LoginForm;","/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/validation/CreatePlantFormSchema.js",[],"/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/validation/LoginFormSchema.js",[],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":2,"column":22,"nodeType":"63","messageId":"64","endLine":2,"endColumn":27},{"ruleId":"61","severity":1,"message":"65","line":5,"column":8,"nodeType":"63","messageId":"64","endLine":5,"endColumn":14},{"ruleId":"61","severity":1,"message":"66","line":19,"column":28,"nodeType":"63","messageId":"64","endLine":19,"endColumn":34},{"ruleId":"61","severity":1,"message":"65","line":2,"column":8,"nodeType":"63","messageId":"64","endLine":2,"endColumn":14},{"ruleId":"61","severity":1,"message":"67","line":4,"column":22,"nodeType":"63","messageId":"64","endLine":4,"endColumn":26},{"ruleId":"61","severity":1,"message":"62","line":4,"column":28,"nodeType":"63","messageId":"64","endLine":4,"endColumn":33},{"ruleId":"61","severity":1,"message":"68","line":23,"column":10,"nodeType":"63","messageId":"64","endLine":23,"endColumn":18},{"ruleId":"61","severity":1,"message":"69","line":20,"column":10,"nodeType":"63","messageId":"64","endLine":20,"endColumn":14},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"no-unused-vars","'Field' is defined but never used.","Identifier","unusedVar","'styled' is defined but never used.","'values' is assigned a value but never used.","'Form' is defined but never used.","'newPlant' is assigned a value but never used.","'user' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]
[{"/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/index.js":"1","/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/reportWebVitals.js":"2","/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/App.js":"3","/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/components/SignUp.js":"4","/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/components/EditPlant.js":"5","/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/components/StyledComponents.js":"6","/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/components/CreatePlantForm.js":"7","/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/components/LoginForm.js":"8","/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/validation/CreatePlantFormSchema.js":"9","/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/validation/LoginFormSchema.js":"10","/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/reducers/index.js":"11","/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/PrivateRoutes.js":"12","/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/components/Registered.js":"13","/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/components/dashboard.js":"14","/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/components/EditUser.js":"15","/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/actions/index.js":"16"},{"size":708,"mtime":1609954987515,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":1609794473852,"results":"19","hashOfConfig":"18"},{"size":1378,"mtime":1609954987511,"results":"20","hashOfConfig":"18"},{"size":2639,"mtime":1609954987518,"results":"21","hashOfConfig":"18"},{"size":3243,"mtime":1609975704634,"results":"22","hashOfConfig":"18"},{"size":2379,"mtime":1609958426983,"results":"23","hashOfConfig":"18"},{"size":3592,"mtime":1609954987512,"results":"24","hashOfConfig":"18"},{"size":3612,"mtime":1609954987513,"results":"25","hashOfConfig":"18"},{"size":328,"mtime":1609799429620,"results":"26","hashOfConfig":"18"},{"size":214,"mtime":1609799429621,"results":"27","hashOfConfig":"18"},{"size":341,"mtime":1609954987515,"results":"28","hashOfConfig":"18"},{"size":410,"mtime":1609954987512,"results":"29","hashOfConfig":"18"},{"size":452,"mtime":1609954987513,"results":"30","hashOfConfig":"18"},{"size":1457,"mtime":1609975768860,"results":"31","hashOfConfig":"18"},{"size":3338,"mtime":1609954987513,"results":"32","hashOfConfig":"18"},{"size":131,"mtime":1609954987512,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ox9xak",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/index.js",[],"/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/reportWebVitals.js",[],["70","71"],"/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/App.js",[],"/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/components/SignUp.js",["72","73","74"],"import React from \"react\";\nimport { withFormik, Field } from \"formik\";\nimport * as yup from \"yup\";\nimport axios from \"axios\";\nimport styled from \"styled-components\";\n\n//Import From\nimport { \n  Input,\n  Heading,\n  FormDiv,\n  Button,\n  Label,\n  Error\n} from './StyledComponents'\n\n\nconst SignUp = props => {\n  const { errors, touched, values } = props;\n  return (\n    <>\n      <FormDiv>\n      <Heading>Let's get Savvy</Heading>\n        <Label>User Name</Label>\n        <Input type=\"text\" name=\"username\"/>\n        {touched.username && errors.username && (\n          <Error>{errors.username}</Error>\n        )}\n        <Label>Phone Number</Label>\n        <Input type=\"text\" name=\"phonenumber\"/>\n        {touched.phonenumber && errors.phonenumber && (\n          <Error>{errors.phonenumber}</Error>\n        )}\n        <Label>Password</Label>\n        <Input type=\"password\" name=\"password\"/>\n        {touched.password && errors.password && (\n          <Error>{errors.password}</Error>\n        )}\n        <Label>Confirm Password</Label>\n        <Input type=\"password\" name=\"password2\"/>\n        {touched.password2 && errors.password2 && (\n          <Error>{errors.password2.slice(49, 69)}</Error>\n        )}\n        <Button type=\"submit\">Sign Up</Button>\n      </FormDiv>\n    </>\n  );\n};\n\nexport default withFormik({\n  mapPropsToValues: values => {\n    return {\n      username: values.username || \"\",\n      password: values.password || \"\",\n      password2: values.password2 || \"\",\n      phonenumber: values.phonenumber || \"\",\n    };\n  },\n  validationSchema: yup.object().shape({\n    username: yup\n      .string()\n      .min(5, \"your username must have at least 5 characters\")\n      .required(),\n    password: yup\n      .string()\n      .min(8, \"password must be at least 8 characters\")\n      .required(\"enter and confirm password\"),\n    password2: yup\n      .string()\n      .oneOf([yup.ref(\"password\"), null, \"passwords must match\"])\n      .required(\"passwords must match\"),\n    phonenumber: yup\n      .number()\n      .positive()\n      .required(\"phone number required\"),\n  }),\n  validateOnChange: false,\n  validateOnBlur: false,\n  handleSubmit: (values, { props, resetForm }) => {\n    let userObj = {\n      username: values.username,\n      password: values.password,\n      phonenumber: values.phonenumber\n    };\n    axios\n      .post(\n        \"\",\n        userObj\n      )\n      .then(res => {\n        localStorage.setItem(\"token\", res.data.token);\n        resetForm();\n        return props.history.push(\"/home\");\n      })\n      .catch(err => {\n        return err.response;\n      });\n  }\n})(SignUp);","/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/components/EditPlant.js",["75","76","77","78"],"/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/components/StyledComponents.js",[],"/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/components/CreatePlantForm.js",["79"],"import React, { useState } from 'react';\nimport * as yup from 'yup';\nimport createPlantSchema from '../validation/CreatePlantFormSchema';\n\n// Create Plant Form Empty Objects\nconst blankCreatePlantForm = {\n    nickname: '',\n    species: '',\n    waterfrequency: '',\n}\n  \nconst initialCreatePlantErrors = {\n    nickname: '',\n    species: '',\n    waterfrequency: '',\n}\n\nfunction CreatePlantForm(props) {\n\n    // Create Plant Form UseState and event handlers\n\n  const [createPlantFormValues, setCreatePlantFormValues] = useState(blankCreatePlantForm);\n  const [newPlant, setNewPlant] = useState([]);\n  const [createPlantErrors, setCreatePlantErrors] = useState(initialCreatePlantErrors);\n\n    \n    const changeCreatePlantValues = (event) => {\n        const {name, value} = event.target;\n        updateCreatePlantForm(name, value);\n    };\n\n    const uponSubmitCreatePlant = (event) => {\n        event.preventDefault();\n        submitCreatePlantForm();\n    }\n\n    const updateCreatePlantForm = (name, value) => {\n\n        yup.reach(createPlantSchema, name)\n         .validate(value)\n         .then(() => {\n           setCreatePlantErrors({...createPlantErrors, [name]: '',})\n           setCreatePlantFormValues({...createPlantFormValues, [name]: value,});\n         })\n         .catch((error) => {\n           setCreatePlantErrors({...createPlantErrors, [name]: error.errors[0],})\n         })\n    };\n    \n    const submitCreatePlantForm = () => {\n        const createPlantInfo = {\n          nickname: createPlantFormValues.nickname,\n          species: createPlantFormValues.species,\n          waterfrequency: createPlantFormValues.waterfrequency,\n        }\n    \n        setNewPlant(createPlantInfo);\n        setCreatePlantFormValues(blankCreatePlantForm);\n    };\n\n    return (\n        <div>\n            <form onSubmit = {uponSubmitCreatePlant} >\n                <label> Nickname\n                    <input name = 'nickname' \n                     type = 'text' \n                     value = {createPlantFormValues.nickname} \n                     onChange = {changeCreatePlantValues} />\n                </label>\n\n                <label> Species\n                    <input name = 'species' \n                     type = 'text' \n                     value = {createPlantFormValues.species} \n                     onChange = {changeCreatePlantValues} />\n                </label>\n\n                <label> Water Frequency\n                    <input name = 'waterfrequency' \n                     type = 'text' \n                     value = {createPlantFormValues.waterfrequency} \n                     onChange = {changeCreatePlantValues} />\n                </label>\n                <button>Submit</button>\n            </form>\n\n            <div>\n                <p>{createPlantErrors.nickname}</p>\n                <p>{createPlantErrors.species}</p>\n                <p>{createPlantErrors.waterfrequency}</p>\n            </div>\n        </div>\n    )\n};\n\nexport default CreatePlantForm;","/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/components/LoginForm.js",["80"],"import React, { useState } from 'react';\nimport * as yup from 'yup';\nimport loginSchema from '../validation/LoginFormSchema';\n\n// Login Form Initial Objects\nconst blankLoginForm = {\n    username: '',\n    password: '',\n}\n\nconst initialLoginErrors = {\n    name: '',\n    password: '',\n}\n\nfunction LoginForm(props) {\n\n  // Login Form Use States and event handlers\n  const [loginFormValues, setLoginFormValues] = useState(blankLoginForm);\n  const [user, setUser] = useState([]);\n  const [loginErrors, setLoginErrors] = useState(initialLoginErrors);\n\n\n    \n    const changeLoginValues = (event) => {\n        const {name, value} = event.target;\n        updateLoginForm(name, value);\n    };\n\n    const uponSubmitLogin = (event) => {\n        event.preventDefault();\n        submitLoginForm();\n    };\n\n    const updateLoginForm = (name, value) => {\n\n        yup.reach(loginSchema, name)\n         .validate(value)\n         .then(() => {\n           setLoginErrors({...loginErrors, [name]: '',})\n           setLoginFormValues({...loginFormValues, [name]: value});\n         })\n         .catch((error) => {\n           setLoginErrors({...loginErrors, [name]: error.errors[0],})\n         })\n    }\n    \n    const submitLoginForm = () => {\n        const userLoginInfo = {\n          username: loginFormValues.username,\n          password: loginFormValues.password,\n        }\n    \n        setUser(userLoginInfo);\n        setLoginFormValues(blankLoginForm);\n    }\n\n\n    return (\n        <div>\n            <form onSubmit = {uponSubmitLogin}>\n                <label> Username\n                    <input name = 'username'\n                     type = 'text' \n                     value = {loginFormValues.username}\n                     onChange = {changeLoginValues} />\n                </label>\n\n                <label> Password\n                    <input name = 'password'\n                     type = 'password' \n                     value = {loginFormValues.password} \n                     onChange = {changeLoginValues} />\n                </label>\n                <button>Submit</button>\n            </form>\n            \n            <div className = 'errors-container'>\n                <p>{loginErrors.username}</p>\n                <p>{loginErrors.password}</p>\n            </div>\n        </div>\n    )\n};\n\nexport default LoginForm;","/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/validation/CreatePlantFormSchema.js",[],"/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/validation/LoginFormSchema.js",[],"/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/reducers/index.js",["81","82"],"/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/PrivateRoutes.js",["83"],"/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/components/Registered.js",[],"/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/components/dashboard.js",["84","85"],"/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/components/EditUser.js",[],"/Users/monamia/Desktop/Lambda/WaterMyPlants/Front-End/src/actions/index.js",[],{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":2,"column":22,"nodeType":"92","messageId":"93","endLine":2,"endColumn":27},{"ruleId":"90","severity":1,"message":"94","line":5,"column":8,"nodeType":"92","messageId":"93","endLine":5,"endColumn":14},{"ruleId":"90","severity":1,"message":"95","line":19,"column":28,"nodeType":"92","messageId":"93","endLine":19,"endColumn":34},{"ruleId":"90","severity":1,"message":"94","line":2,"column":8,"nodeType":"92","messageId":"93","endLine":2,"endColumn":14},{"ruleId":"90","severity":1,"message":"96","line":4,"column":10,"nodeType":"92","messageId":"93","endLine":4,"endColumn":20},{"ruleId":"90","severity":1,"message":"97","line":5,"column":22,"nodeType":"92","messageId":"93","endLine":5,"endColumn":26},{"ruleId":"90","severity":1,"message":"91","line":5,"column":28,"nodeType":"92","messageId":"93","endLine":5,"endColumn":33},{"ruleId":"90","severity":1,"message":"98","line":23,"column":10,"nodeType":"92","messageId":"93","endLine":23,"endColumn":18},{"ruleId":"90","severity":1,"message":"99","line":20,"column":10,"nodeType":"92","messageId":"93","endLine":20,"endColumn":14},{"ruleId":"90","severity":1,"message":"100","line":1,"column":10,"nodeType":"92","messageId":"93","endLine":1,"endColumn":20},{"ruleId":"101","severity":1,"message":"102","line":12,"column":5,"nodeType":"103","messageId":"104","endLine":15,"endColumn":6},{"ruleId":"90","severity":1,"message":"105","line":1,"column":17,"nodeType":"92","messageId":"93","endLine":1,"endColumn":26},{"ruleId":"90","severity":1,"message":"106","line":2,"column":23,"nodeType":"92","messageId":"93","endLine":2,"endColumn":34},{"ruleId":"107","severity":1,"message":"108","line":29,"column":29,"nodeType":"109","endLine":29,"endColumn":54},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"no-unused-vars","'Field' is defined but never used.","Identifier","unusedVar","'styled' is defined but never used.","'values' is assigned a value but never used.","'useHistory' is defined but never used.","'Form' is defined but never used.","'newPlant' is assigned a value but never used.","'user' is assigned a value but never used.","'useReducer' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'Component' is defined but never used.","'useDispatch' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]